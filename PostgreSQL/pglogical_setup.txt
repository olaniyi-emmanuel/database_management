Comprehensive Guide to Setting Up Logical Replication with pglogical in PostgreSQL

This document provides a step-by-step procedure for configuring logical replication in PostgreSQL using the pglogical extension. Designed for database engineers, this guide emphasizes security, scalability, and practical application, drawing parallels to MySQL grant management where applicable. Logical replication with pglogical offers fine-grained control over data replication, making it ideal for selective table replication, cross-version upgrades, or multi-master setups. Detailed scenarios for on-premises to cloud and cloud-to-cloud replication are included with cloud provider-specific guidance.

Current Date: March 11, 2025

Prerequisites:
- PostgreSQL Version: 9.4 or higher (preferably 10+ for native logical replication compatibility).
- Operating System: Linux (examples use Ubuntu for on-prem; cloud uses managed instances).
- Access: Superuser privileges on both publisher and subscriber nodes (or equivalent cloud roles).
- Network: Secure connectivity between nodes (e.g., private IPs, VPN, or cloud VPC).
- Tools: psql for command-line interaction; cloud CLI tools (e.g., aws cli, gcloud).

Overview:
pglogical extends PostgreSQL’s built-in logical replication (introduced in 10.0) by adding features like DDL replication, conflict resolution, and support for older versions (9.4+). It uses a publish/subscribe model, similar to MySQL’s replication with binlog filtering, but with more flexibility. This guide sets up unidirectional replication from a publisher to a subscriber, with extensive details for on-prem-to-cloud and cloud-to-cloud use cases.

Step-by-Step Procedure:

Step 1: Install PostgreSQL and pglogical
1. Install PostgreSQL (if not already installed):
   - On-prem:
     sudo apt update
     sudo apt install postgresql-15
     Replace "15" with your desired version (e.g., "12", "14").
   - Cloud: Use provider console or CLI (e.g., AWS RDS, GCP Cloud SQL, Azure DB for PostgreSQL).
2. Install pglogical:
   - On-prem:
     sudo curl https://dl.2ndquadrant.com/default/release/apt -o /etc/apt/sources.list.d/2ndquadrant.list
     sudo apt update
     sudo apt install postgresql-15-pglogical
   - Cloud:
     - AWS RDS: Upload pglogical via S3 (see AWS docs), enable via custom parameter group.
     - GCP Cloud SQL: Requires custom instance with manual pglogical installation.
     - Azure: Use flexible server; install pglogical via SSH or extension scripts.
3. Verify Installation:
   psql -U postgres -c "SELECT version();"
   Cloud: Connect via cloud endpoint (e.g., psql -h rds-endpoint.aws.com -U postgres).

Step 2: Configure PostgreSQL for Logical Replication
1. Edit postgresql.conf on both publisher and subscriber:
   - On-prem: /etc/postgresql/15/main/postgresql.conf
   - Cloud: Use parameter groups (AWS), instance settings (GCP/Azure).
   - Settings:
     wal_level = logical              # Enables logical decoding (like MySQL binlog)
     max_replication_slots = 10       # Slots for replication (adjust based on cloud limits)
     max_wal_senders = 10             # Concurrent WAL senders
     shared_preload_libraries = 'pglogical'  # Load pglogical at startup
     listen_addresses = 'localhost,192.168.1.100'  # On-prem; cloud uses internal endpoint
   - Cloud Notes:
     - AWS RDS: Set via custom parameter group; reboot instance.
     - GCP Cloud SQL: Modify via gcloud sql instances patch --database-flags.
     - Azure: Update via portal or CLI (az postgres server configuration set).
2. Edit pg_hba.conf for replication access:
   - On-prem: /etc/postgresql/15/main/pg_hba.conf
     host all postgres 192.168.1.101/32 md5  # Subscriber IP
     host replication repl_user 192.168.1.101/32 md5  # Dedicated replication user
   - Cloud: Managed via security rules or IAM (e.g., AWS security groups, GCP firewall).
3. Restart PostgreSQL:
   - On-prem: sudo systemctl restart postgresql
   - Cloud: Reboot via console (AWS RDS: Modify instance; GCP: gcloud sql instances restart).

Step 3: Set Up Replication User and Database
1. Create a Replication User:
   psql -U postgres
   CREATE ROLE repl_user WITH LOGIN PASSWORD 'secure_password' REPLICATION;
   Cloud: Use cloud IAM if supported (e.g., AWS IAM auth).
2. Create Databases:
   - On both nodes:
     CREATE DATABASE app_db;
     \c app_db
3. Enable pglogical Extension:
   - On both publisher and subscriber:
     CREATE EXTENSION pglogical;

Step 4: Configure the Publisher Node
1. Create a Publisher Node:
   SELECT pglogical.create_node(
       node_name := 'publisher_node',
       dsn := 'host=192.168.1.100 port=5432 dbname=app_db user=repl_user password=secure_password'  # On-prem
       # Cloud: 'host=rds-endpoint.aws.com port=5432 ...'
   );
2. Create a Replication Set:
   SELECT pglogical.replication_set_add_table(
       set_name := 'default',
       relation := 'public.my_table',
       synchronize_data := true
   );
   Assumes my_table exists (CREATE TABLE my_table (id SERIAL PRIMARY KEY, data TEXT);).
3. Verify Publisher Setup:
   SELECT * FROM pglogical.replication_set;

Step 5: Configure the Subscriber Node
1. Create a Subscriber Node:
   SELECT pglogical.create_node(
       node_name := 'subscriber_node',
       dsn := 'host=192.168.1.101 port=5432 dbname=app_db user=repl_user password=secure_password'  # On-prem
       # Cloud: 'host=gcp-endpoint.google.com port=5432 ...'
   );
2. Subscribe to the Publisher:
   SELECT pglogical.create_subscription(
       subscription_name := 'sub1',
       provider_dsn := 'host=192.168.1.100 port=5432 dbname=app_db user=repl_user password=secure_password',  # On-prem
       # Cloud: 'host=rds-endpoint.aws.com port=5432 ...'
       replication_sets := ARRAY['default'],
       synchronize_structure := true,
       synchronize_data := true
   );
3. Verify Subscription:
   SELECT * FROM pglogical.show_subscription_status();

Step 6: Test Replication
1. Insert Data on Publisher:
   \c app_db
   INSERT INTO my_table (data) VALUES ('Test replication');
2. Check Subscriber:
   SELECT * FROM my_table;
   Expect 'Test replication'.
3. Simulate Updates:
   UPDATE my_table SET data = 'Updated data' WHERE id = 1;
   Confirm replication.

Step 7: Monitor and Troubleshoot
1. Check Replication Slots:
   SELECT * FROM pg_replication_slots WHERE plugin = 'pglogical_output';
2. Monitor Subscription Status:
   SELECT * FROM pglogical.show_subscription_status();
   Look for status = 'replicating'.
3. View Logs:
   - On-prem: /var/log/postgresql/postgresql-15-main.log
   - Cloud: AWS CloudWatch, GCP Stackdriver, Azure Monitor.
4. Common Issues:
   - Slot Conflicts: SELECT pglogical.drop_subscription('sub1');
   - Network: Check cloud security groups/firewalls.

Step 8: Secure the Setup
- Use SSL:
  - On-prem: hostssl replication repl_user 192.168.1.101/32 md5
  - Cloud: Enable via console (AWS RDS SSL, GCP SSL enforcement).
- Rotate Credentials: ALTER ROLE repl_user WITH PASSWORD 'new_password';
- Limit Privileges: Avoid superuser for replication.

Scenario 1: On-Premises to Cloud Database Replication
- Context: Publisher on-prem, subscriber in cloud (e.g., AWS RDS, GCP Cloud SQL, Azure DB).
- Detailed Steps:
  1. Network Setup:
     - VPN: Configure site-to-site VPN (e.g., AWS VPN, GCP Cloud VPN).
       Example: AWS VPN - VPC CIDR 10.0.0.0/16, on-prem 192.168.1.0/24.
     - Direct Connect: For high bandwidth (AWS Direct Connect, Azure ExpressRoute).
     - Publisher listen_addresses = '192.168.1.100' (on-prem private IP).
     - Subscriber DSN: Use cloud endpoint (e.g., 'host=rds-endpoint.aws.com ...').
  2. Security Configuration:
     - SSL: On-prem - postgresql.conf: ssl = on, ssl_cert_file = '/path/to/cert.pem', ssl_key_file = '/path/to/key.pem'.
       pg_hba.conf: hostssl replication repl_user 10.0.0.0/16 md5 (cloud VPC CIDR).
     - Cloud:
       - AWS RDS: Enable SSL in parameter group, download RDS CA cert, connect with sslmode=verify-full.
       - GCP Cloud SQL: Enable SSL, use client certs (gcloud sql ssl-certs create).
       - Azure: Enforce SSL via portal, use Azure CA cert.
     - Firewall: On-prem allows outbound 5432 to cloud IP; cloud security group allows inbound from on-prem IP.
  3. Initial Sync:
     - Large datasets: Use pg_dump/pg_restore to pre-seed cloud DB, then start replication.
       pg_dump -h 192.168.1.100 -U postgres app_db | psql -h rds-endpoint.aws.com -U postgres app_db
  4. Provider-Specific:
     - AWS RDS:
       - Custom parameter group: wal_level=logical, shared_preload_libraries=pglogical.
       - Upload pglogical to S3, install via RDS console (rdsadmin.rdsadmin_util.create_extension).
       - IAM auth: GRANT rds_iam TO repl_user; use IAM token in DSN.
     - GCP Cloud SQL:
       - Custom instance required (default instances don’t support pglogical).
       - SSH to instance, install pglogical manually (apt install postgresql-15-pglogical).
       - gcloud sql instances patch --database-flags wal_level=logical.
     - Azure DB:
       - Flexible Server: SSH to install pglogical, update configs via CLI.
       - az postgres server configuration set --name wal_level --value logical.
  5. Troubleshooting:
     - Latency: Test VPN throughput (ping cloud endpoint from on-prem).
     - SSL Errors: Verify certs match (e.g., psql -h rds-endpoint.aws.com -U postgres --sslrootcert=rds-ca.pem).

Scenario 2: Cloud-to-Cloud Database Replication
- Context: Publisher and subscriber both in cloud (e.g., AWS RDS to GCP Cloud SQL, or AWS-to-AWS).
- Detailed Steps:
  1. Network Setup:
     - Same Provider (e.g., AWS-to-AWS):
       - VPC peering: Peer VPCs (e.g., VPC1 10.0.0.0/16 to VPC2 10.1.0.0/16).
       - DSNs: Use internal endpoints (e.g., 'host=rds1.us-east-1.rds.amazonaws.com ...').
       - Security group: Allow 5432 between RDS instances.
     - Different Providers (e.g., AWS to GCP):
       - VPN: AWS VPN to GCP Cloud VPN (e.g., AWS CIDR 10.0.0.0/16, GCP 10.1.0.0/16).
       - Public Internet (less secure): Use SSL, restrict to specific IPs.
       - DSNs: 'host=rds-endpoint.aws.com ...' and 'host=gcp-endpoint.google.com ...'.
  2. Security Configuration:
     - SSL:
       - AWS RDS: Enable SSL, use rds-ca.pem, sslmode=verify-full in DSN.
       - GCP Cloud SQL: Enforce SSL, generate client certs (gcloud sql ssl-certs create).
       - Azure: Enforce SSL via portal, use Azure CA cert.
     - IAM:
       - AWS: GRANT rds_iam TO repl_user; use temporary IAM token in DSN.
       - GCP: Use IAM database auth if custom instance supports it.
       - Azure: Azure AD integration for flexible server.
     - Firewall:
       - Same provider: Security group allows 5432 within VPC.
       - Cross-provider: AWS SG allows outbound to GCP IP, GCP firewall allows inbound from AWS IP.
  3. Performance Optimization:
     - Same region: Deploy in same AZ/region (e.g., us-east-1a) to minimize latency.
     - Cross-provider: Monitor latency (e.g., ping rds-endpoint.aws.com from GCP instance).
     - Quotas: AWS RDS limits replication slots (increase via support ticket).
  4. Provider-Specific:
     - AWS-to-AWS:
       - Both RDS instances: Custom parameter groups for pglogical, reboot after config.
       - Pre-seed: Use AWS DMS or pg_dump between endpoints if initial sync is slow.
     - AWS to GCP:
       - AWS RDS: Install pglogical via S3, set wal_level=logical.
       - GCP Cloud SQL: Custom instance, manual pglogical install, gcloud patch for configs.
       - Cert mismatch: Ensure SSL certs align (e.g., AWS CA for RDS, GCP CA for Cloud SQL).
     - Azure-to-AWS:
       - Azure Flexible Server: Install pglogical, set configs via CLI.
       - AWS RDS: Same as above, ensure VPN or public IPs align.
  5. Troubleshooting:
     - Connection Failures: Verify VPC peering (aws ec2 describe-vpc-peering-connections).
     - Lag: Check cloud metrics (AWS CloudWatch WAL bytes, GCP Stackdriver replication lag).
     - Version Mismatch: Ensure pglogical versions match (e.g., AWS may lag behind Azure).

Best Practices:
- Granular Replication: Use replication sets to mimic MySQL’s table-level filtering.
- Backup First: Snapshot publisher (on-prem: pg_basebackup; cloud: console snapshot).
- Monitor WAL Growth: Tune max_replication_slots based on cloud limits.
- Test Failover: Promote subscriber for DR testing.

Additional Resources:
- PostgreSQL Official Documentation: https://www.postgresql.org/docs/current/logical-replication.html
- pglogical Documentation: https://www.2ndquadrant.com/en/resources/pglogical/pglogical-docs/
- Cloud Docs: AWS RDS PostgreSQL, GCP Cloud SQL, Azure DB for PostgreSQL.

